package main

import "fmt"

// NOTE: go1.17 would compile failed

func main() {
        fmt.Println(reverse([]int{1, 2, 3, 4, 5}))
        fmt.Println(reverse[int,int64]([]int{1, 2, 3, 4, 5}))
        fmt.Println(reverse[int]([]int{1, 2, 3, 4, 5}))

        // NOTE: generic call does not allow empty []
        // fmt.Println(reverse[]([]int{1, 2, 3, 4, 5}))
}

// struct with generic
type List[T any] struct {
	next  *List[T]
	value T
}
func (l *List[T]) Len() int  { return 1; }
type List2[T any] = List[T]

// invalid
// type List3=[T any]List[T]

// if uncommented, given compile error with go1.18: function type must have no type parameters
// type X = func[T any](s []T) []T 

// func with generic
//
// T is a type parameter that is used like normal type inside the function
// any is a constraint on type i.e T has to implement "any" interface
func reverse[T any, V int64 | float64](s []T) []T {
        l := len(s)
        r := make([]T, l)

        for i, ele := range s {
                r[l-i-1] = ele
        }
        return r
}